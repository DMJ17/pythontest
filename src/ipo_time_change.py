#-*- coding: UTF-8 -*-
import json
import re
import os
import Levenshtein
json_file_path = 'C:\\Users\DMJ\Desktop\工作日常记录\资料\\time_json'
json_file_changed = 'C:\\Users\DMJ\Desktop\工作日常记录\资料\\time_change'
nature_of_business = ['有限责任（国有独资）', '中央企业', '国务院国资委直属中央企业', '国有独资', '集体资产出资设立', '有限合伙', '有限责任', '豁免的有限责任', '股份有限公司', '股份有限', '贸易和投资', '投资控股有限', '企业法人有限责任', '其他', '全民所有制', '根据香港法律设立并合法存续的公司', '事业单位', '投资有限公司', '实业投资', '股权投资', '控股型母公司', '私人豁免有限公司']
nationality_list = ['菲律宾', '荷兰', '法国', '奥地利', '圣基茨和尼维斯联邦', '中国澳门', '中国', '美国', '加拿大', '中国台湾', '中国香港', '新加坡', '澳大利亚', '日本', '英国', '意大利', '马来西亚', '韩国', '新西兰', '葡萄牙', '瑞士', '德国', '印度', '比利时', '其他']
industry_name_list = ['碳酸饮料制造', '皮革鞣制加工', '自动售货机零售', '游乐园', '煤炭加工', '其他金属工具制造', '拖拉机制造', '学前教育', '人民法院', '其他人造板制造', '纺织服装、服饰业', '金属制日用品制造', '口腔科用设备及器具制造', '木材和竹材采运', '财务公司服务', '建筑工程用机械制造', '互联网安全服务', '机床功能部件及附件制造', '铜压延加工', '合成橡胶制造', '互联网信息服务', '钨钼冶炼', '金属加工机械制造', '数字内容服务', '经济事务管理机构', '地下综合管廊工程建筑', '证券市场管理服务', '专科医院', '家用制冷电器具制造', '其他家用电力器具制造', '自行车修理', '广播电视设备制造', '餐饮业', '洗浴和保健养生服务', '饮料及冷饮服务', '信息系统集成和物联网技术服务', '矿产品、建材及化工产品批发', '生物基、淀粉基新材料制造', '货币经纪公司服务', '绿化管理', '宠物服务', '其他组织管理服务', '小吃服务', '娱乐船和运动船制造', '风能原动设备制造', '创业投资基金', '图书出版', '人民政协、民主党派', '棉、麻、糖、烟草种植', '其他电子元件制造', '纤维素纤维原料及纤维制造', '集装箱及金属包装容器制造', '畜牧良种繁殖活动', '金属工具制造', '食用菌加工', '土地登记代理服务', '其他未列明金融业', '工业颜料制造', '农作物病虫害防治活动', '软件和信息技术服务业', '卫星传输服务', '其他农牧产品批发', '房地产业', '文化娱乐经纪人', '餐饮配送服务', '塑料人造革、合成革制造', '雕塑工艺品制造', '气象服务', '典当', '水力发电', '年金保险', '物业管理', '日用品出租', '农、林、牧、渔产品批发', '毛皮鞣制加工', '房屋建筑业', '检测服务', '宝石、玉石采选', '信托公司', '维纶纤维制造', '渔业产品批发', '汽车金融公司服务', '陶瓷、石材装饰材料零售', '五金、家具及室内装饰材料专门零售', '其他制造业', '其他未列明国家机构', '林业产品批发', '其他通用设备制造业', '专项化学用品制造', '健身器材制造', '贵金属矿采选', '其他提供住宿社会救助', '木竹材加工机械制造', '毛织造加工', '基层医疗卫生服务', '泵及真空设备制造', '集成电路设计', '汽车用发动机制造', '半导体分立器件制造', '其他工艺美术及礼仪用品制造', '照明灯具制造', '食用植物油加工', '生活用燃料零售', '厨具卫具及日用杂品批发', '日用家电零售', '危险化学品仓储', '味精制造', '电车制造', '滚动轴承制造', '其他乐器及零件制造', '其他商务服务业', '基层群众自治组织及其他组织', '光学仪器制造', '石棉及其他非金属矿采选', '火力发电工程施工', '远洋货物运输', '建筑用木料及木材组件加工', '其他家具制造', '研究和试验发展', '其他畜牧业', '缝制机械制造', '其他文化艺术业', '陈设艺术陶瓷制造', '互联网和相关服务', '牲畜屠宰', '技术推广服务', '钨钼矿采选', '宗教活动场所服务', '铁路运输辅助活动', '航空旅客运输', '褐煤开采洗选', '咨询与调查', '食品、饮料、烟草及饲料生产专用设备制造', '其他建筑安装业', '糕点、面包零售', '化学农药制造', '砖瓦、石材等建筑材料制造', '废弃资源综合利用业', '金属密封件制造', '农、林、牧、渔专业及辅助性活动', '疗养院', '其他常用有色金属矿采选', '医药及医疗器材批发', '配电开关控制设备制造', '支撑软件开发', '计算机、软件及辅助设备批发', '成人初中教育', '其他道路运输辅助活动', '其他合成纤维制造', '政策性银行服务', '期货市场服务', '其他化工产品批发', '其他体育场地设施管理', '保险中介服务', '法律服务', '其他土木工程建筑施工', '工程勘察活动', '疾病预防控制中心', '灯用电器附件及其他照明器具制造', '焰火、鞭炮产品制造', '非融资担保服务', '图书、报刊零售', '其他水利管理业', '工伤保险', '钟表、眼镜零售', '塑料鞋制造', '柑橘类种植', '针织或钩针编织服装制造', '资本市场服务', '核子及核辐射测量仪器制造', '医学生产用信息化学品制造', '环境保护监测', '知识产权服务', '其他群众团体', '西乐器制造', '灯具、装饰物品批发', '特殊教育', '医疗用品及器材批发', '电气设备修理', '专科疾病防治院（所、站）', '含乳饮料和植物蛋白饮料制造', '音响设备制造', '其他文化艺术经纪代理', '照明器具生产专用设备制造', '木门窗制造', '石棉制品制造', '微特电机及组件制造', '工艺美术颜料制造', '其他电工器材制造', '运输设备及生产用计数仪表制造', '天然草原割草', '糖果、巧克力及蜜饯制造', '蜜蜂饲养', '有色金属冶炼和压延加工业', '纺织品、针织品及原料批发', '酒、饮料及茶叶零售', '智能无人飞行器制造', '农用及园林用金属工具制造', '铁路工程建筑', '鞋帽批发', '其他农、林、牧、渔业机械制造', '其他综合管理服务', '社会公共安全设备及器材制造', '核电工程施工', '涤纶纤维制造', '内陆养殖', '其他航空运输辅助活动', '其他毛皮制品加工', '城市轨道交通', '运输代理业', '广播', '机场', '蔬菜加工', '篷、帆布制造', '书、报刊印刷', '能源矿产地质勘查', '其他烟草制品制造', '玻璃包装容器制造', '橡胶和塑料制品业', '食品、酒、饮料及茶生产专用设备制造', '空中交通管理', '营养和保健品零售', '土木工程建筑业', '集成电路制造', '体育用品及器材零售', '计算机和办公设备维修', '教学专用仪器制造', '资本投资服务', '绢纺和丝织加工', '毛皮服装加工', '鞋帽零售', '热力生产和供应', '阀门和旋塞制造', '纸和纸板容器制造', '其他技术推广服务', '其他电子器件制造', '其他机械与设备经营租赁', '老年人、残疾人养护服务', '卷烟制造', '建筑用石加工', '锌锰电池制造', '其他通用零部件制造', '石油和天然气开采业', '广告业', '塑料丝、绳及编织品制造', '中医医院', '补充保险', '客运轮渡运输', '电视机制造', '麻染整精加工', '其他法律服务', '金属制餐具和器皿制造', '环境卫生管理', '金属成形机床制造', '铁路专用设备及器材、配件制造', '切削工具制造', '实验分析仪器制造', '果品、蔬菜零售', '皮革、毛皮及其制品加工专用设备制造', '酒的制造', '其他仪器仪表制造业', '丝绢纺织及印染精加工', '危险货物道路运输', '铁路、船舶、航空航天等运输设备修理', '广播电视传输服务', '玻璃纤维及制品制造', '水产捕捞', '其他水泥类似制品制造', '其他水产品加工', '啤酒制造', '单板加工', '齿轮及齿轮减、变速箱制造', '球类制造', '应用电视设备及其他广播电视设备制造', '石油、煤炭及其他燃料加工业', '金属及金属矿批发', '新材料技术推广服务', '室内娱乐活动', '其他金融业', '娃娃玩具制造', '互联网公共服务平台', '其他基础化学原料制造', '会计、审计及税务服务', '银行监管服务', '铁路机车车辆配件制造', '水产品冷冻加工', '海底设施铺设工程建筑', '锅炉及原动设备制造', '防水建筑材料制造', '其他房屋建筑业', '烟草生产专用设备制造', '音像制品出租', '染料制造', '互联网游戏服务', '增材制造装备制造', '中西医结合医院', '铁路、船舶、航空航天和其他运输设备制造业', '通用航空服务', '其他饮料及冷饮服务', '电气安装', '汽车车身、挂车制造', '危险废物治理', '羊的饲养', '助动车制造', '汽柴油车整车制造', '互联网接入及相关服务', '豆类种植', '体育组织', '中药饮片加工', '农副食品加工业', '瓶（罐）装饮用水制造', '其他产业用纺织制成品制造', '石墨及其他非金属矿物制品制造', '宠物饲料加工', '职业初中教育', '图书批发', '专用化学产品制造', '肥料制造', '水产品罐头制造', '电力生产', '城市公共交通运输', '文体设备和用品出租', '石墨及碳素制品制造', '社会看护与帮助服务', '电气设备批发', '贸易代理', '本册印制', '证券期货监管服务', '电子真空器件制造', '天然气开采', '包装专用设备制造', '食品制造业', '米、面制品制造', '广播电视卫星传输服务', '铝冶炼', '基因工程药物和疫苗制造', '管道运输业', '干部休养所', '文艺创作与表演', '隔热和隔音材料制造', '海洋油气资源开发利用工程建筑', '船舶及相关装置制造', '普通高中教育', '文教、工美、体育和娱乐用品制造业', '机制纸及纸板制造', '航空客货运输', '船舶拆除', '海上旅客运输', '纤维板制造', '劳务派遣服务', '软木制品及其他木制品制造', '其他游览景区管理', '核力发电', '复混肥料制造', '民主党派', '环境治理业', '中央银行服务', '公路管理与养护', '普通铁路旅客运输', '棉织造加工', '广播、电视、电影和录音制作业', '生物药品制造', '黄酒制造', '灯具零售', '棉花加工机械制造', '电光源制造', '镍氢电池制造', '其他未列明通用设备制造业', '合成材料制造', '城市轨道交通工程建筑', '石油及制品批发', '有机化学原料制造', '化妆品制造', '基本医疗保险', '道路运输辅助活动', '其他未列明制造业', '家具零售', '医药制造业', '麻纺织及染整精加工', '皮革、毛皮、羽毛及其制品和制鞋业', '互联网批发', '冶金专用设备制造', '采盐', '仪器仪表制造业', '陶瓷制品制造', '加工纸制造', '体育用品设备出租', '环境与生态监测检测服务', '机织服装制造', '运动休闲针织服装制造', '木材加工和木、竹、藤、棕、草制品业', '客运火车站', '饼干及其他焙烤食品制造', '通用设备修理', '农副食品加工专用设备制造', '水的生产和供应业', '综合零售', '家具制造业', '玻璃纤维增强塑料制品制造', '棉纺织及印染精加工', '速冻食品制造', '石灰石、石膏开采', '果菜汁及果菜汁饮料制造', '农产品初加工活动', '机械设备经营租赁', '化学药品制剂制造', '飞机制造', '粮油零售', '其他饲料加工', '社会保障', '危险品仓储', '铁路、道路、隧道和桥梁工程建筑', '风动和电动工具制造', '计算机、通信和其他电子设备制造业', '意外伤害保险', '麻纤维纺前加工和纺纱', '建筑陶瓷制品制造', '方便食品制造', '石灰和石膏制造', '其他采矿业', '土地调查评估服务', '互联网数据服务', '房地产中介服务', '大型货物道路运输', '电工仪器仪表制造', '计算机外围设备制造', '货运港口', '体育场馆建筑', '煤炭开采和洗选专业及辅助性活动', '图书馆与档案馆', '其他航空航天器制造', '有机肥料及微生物肥料制造', '茶馆服务', '其他调味品、发酵制品制造', '货运火车站（场）', '其他农业专业及辅助性活动', '游览景区管理', '宠物食品用品零售', '其他安全保护服务', '漆器工艺品制造', '其他文化、办公用机械制造', '内燃机及配件制造', '塑料加工专用设备制造', '银矿采选', '药用辅料及包装材料', '妇联', '对外事务管理机构', '麻织造加工', '其他物料搬运设备制造', '塑料家具制造', '厨具卫具及日用杂品零售', '其他畜牧专业及辅助性活动', '家具和相关物品修理', '冷冻饮品及食用冰制造', '其他宠物服务', '广播电视接收设备制造', '房地产租赁经营', '科技推广和应用服务业', '水力发电工程施工', '非专业视听设备制造', '电信', '其他金属制日用品制造', '铅蓄电池制造', '其他办公设备维修', '其他未列明建筑业', '窄轨机车车辆制造', '正餐服务', '盐及调味品批发', '园区管理服务', '生物质能发电', '化学矿开采', '工程和技术研究和试验发展', '光学玻璃制造', '内河货物运输', '导航、测绘、气象及海洋专用仪器制造', '互联网平台', '试验机制造', '照相机及器材制造', '服饰制造', '其他资本市场服务', '建筑物清洁服务', '口腔清洁用品制造', '其他污染治理', '其他水的处理、利用与分配', '环境污染处理专用药剂材料制造', '液力动力机械元件制造', '橡胶鞋制造', '广播电视节目制作及发射设备制造', '密封用填料及类似品制造', '鱼糜制品及水产品干腌制加工', '职业技能培训', '稀有稀土金属矿采选', '木片加工', '纺织专用设备制造', '文化活动服务', '儿童乘骑玩耍的童车类产品制造', '医疗设备经营租赁', '铁合金冶炼', '玩具制造', '水资源专用机械制造', '其他机械和设备修理业', '自然科学研究和试验发展', '无机盐制造', '其他农副食品加工', '生物质燃料加工', '期刊出版', '家禽饲养', '商业银行服务', '足浴服务', '蔬菜种植', '其他文化用品零售', '茶饮料及其他饮料制造', '木质装饰材料零售', '其他渔业专业及辅助性活动', '建筑幕墙装饰和装修', '公共设施管理业', '临终关怀服务', '烟草制品批发', '航标器材及其他相关装置制造', '基础地质勘查', '科技中介服务', '噪声与振动控制服务', '智能车载设备制造', '计算机整机制造', '绘图、计算及测量仪器制造', '核燃料加工', '其他方便食品制造', '铅锌矿采选', '其他卫生活动', '电容器及其配套设备制造', '福利彩票服务', '报纸出版', '常用有色金属冶炼', '零售业', '玻璃制造', '稀有稀土金属冶炼', '社会经济咨询', '天使投资', '化妆品及卫生用品批发', '海洋天然气及可燃冰开采', '其他日用产品修理业', '镍钴冶炼', '制药专用设备制造', '土砂石开采', '保险业', '通信设备零售', '饲料生产专用设备制造', '鱼油提取及制品制造', '花卉种植', '金融信息服务', '交通及公共管理用金属标牌制造', '其他纸制品制造', '律师及相关法律服务', '计算机和辅助设备修理', '文化体育娱乐活动与经纪代理服务', '铜冶炼', '茶叶种植', '镁冶炼', '保险资产管理', '石油开采', '糖果、巧克力制造', '玻璃保温容器制造', '检验检疫服务', '道路运输业', '化肥批发', '谷物种植', '城市公园管理', '风力发电', '胶合板制造', '教育', '金属工艺品制造', '缫丝加工', '质检技术服务', '皮革服装制造', '多式联运', '其他机织服装制造', '场地准备活动', '煤制合成气生产', '铝压延加工', '塑料板、管、型材制造', '制糖业', '高铁设备、配件制造', '农、林、牧、渔专用机械制造', '针织或钩针编织物印染精加工', '医学研究和试验发展', '生育保险', '货运枢纽（站）', '专业公共卫生服务', '针织或钩针编织物及其制品制造', '体育用品及器材批发', '水污染治理', '道路货物运输', '互联网科技创新平台', '小麦种植', '其他未包括金融业', '歌舞厅娱乐活动', '其他食品零售', '毛皮鞣制及制品加工', '羽毛（绒）制品加工', '坚果、含油果、香料和饮料作物种植', '家用电器修理', '环保工程施工', '羽毛（绒）加工', '管道工程建筑', '港口及航运设施工程建筑', '常用有色金属矿采选', '紧固件制造', '图书出租', '其他煤炭采选', '控股公司服务', '文化、体育用品及器材批发', '锑矿采选', '化学原料和化学制品制造业', '宠物食品用品批发', '陆地石油开采', '不提供住宿社会工作', '含油果种植', '非金融机构支付服务', '其他自然保护', '社会人文科学研究', '健身休闲活动', '公共电汽车客运', '文化用信息化学品制造', '信息系统集成服务', '铸造及其他金属制品制造', '其他通用仪器制造', '陆地天然气开采', '印刷专用设备制造', '化纤织造加工', '五金零售', '生物基化学纤维制造', '综合医院', '图书馆', '其他贵金属冶炼', '煤炭开采和洗选业', '日用电器修理', '航空货物运输', '石墨、滑石采选', '半导体照明器件制造', '机械化农业及园艺机具制造', '生态保护', '文化会展服务', '烘炉、熔炉及电炉制造', '中等职业学校教育', '日用陶瓷制品制造', '体育会展服务', '船舶改装', '文化用品设备出租', '园艺陶瓷制造', '调味品、发酵制品制造', '精炼石油产品制造', '小麦加工', '互联网广告服务', '教学用模型及教具制造', '体育场馆管理', '影视节目制作', '丝印染精加工', '农业专业及辅助性活动', '洗涤机械制造', '竹材采运', '坚果种植', '液化石油气生产和供应业', '果品、蔬菜批发', '光电子器件制造', '交通安全、管制及类似专用设备制造', '其他国家机构', '其他园艺作物种植', '生产专用车辆制造', '草种植及割草', '氨纶纤维制造', '石棉水泥制品制造', '节能环保工程施工', '其他食品制造', '化纤织物染整精加工', '肉、禽类罐头制造', '医疗诊断、监护及治疗设备制造', '互联网生产服务平台', '基础化学原料制造', '塑料制品业', '洗浴服务', '皮革制品制造', '窗帘、布艺类产品制造', '日用杂品制造', '谷物仓储', '塑胶玩具制造', '船用配套设备制造', '普通货物道路运输', '医疗仪器设备及器械制造', '其他林业专业及辅助性活动', '金矿采选', '毛染整精加工', '卫生材料及医药用品制造', '固定电信服务', '麻类种植', '其他水上运输辅助活动', '烘炉、风机、包装等设备制造', '租赁业', '名胜风景区管理', '人力资源服务', '棉花种植', '食用菌种植', '搪瓷日用品及其他搪瓷制品制造', '集装箱制造', '工业自动控制系统装置制造', '翻译服务', '金属玩具制造', '竹、藤家具制造', '燃气及类似能源家用器具制造', '工程管理服务', '机动车燃气零售', '体育彩票服务', '电子器件制造', '休闲娱乐用品设备出租', '文化艺术培训', '纺织、服装及家庭用品批发', '中国共产党机关', '林业有害生物防治活动', '其他住宿业', '粘土及其他土砂石开采', '纺织带和帘子布制造', '其他房地产业', '平板玻璃制造', '林业', '棉花仓储', '其他批发业', '金属制品业', '土地规划服务', '电玩具制造', '市场管理服务', '商务代理代办服务', '水轮机及辅机制造', '自然遗迹保护管理', '毛条和毛纱线加工', '水上运输辅助活动', '金属制品、机械和设备修理业', '其他科技推广服务业', '文教办公用品制造', '工会', '粘土砖瓦及建筑砌块制造', '信息技术咨询服务', '其他肥料制造', '隧道施工专用机械制造', '稀有稀土金属压延加工', '家用电力器具专用配件制造', '铁路运输设备修理', '刀剪及类似日用金属工具制造', '玻璃制品制造', '非金属废料和碎屑加工处理', '精制茶加工', '植物园管理服务', '电阻电容电感元件制造', '显示器件制造', '森林改培', '银冶炼', '电子测量仪器制造', '金融资产管理公司', '水果和坚果加工', '集装箱道路运输', '包装服务', '化纤浆粕制造', '建筑物拆除和场地准备活动', '烈士陵园、纪念馆', '棉、麻批发', '酒精制造', '其他食品批发', '黑色金属冶炼和压延加工业', '货币银行服务', '禽类屠宰', '包装装潢及其他印刷', '林木育种', '炼油、化工生产专用设备制造', '音像制品出版', '街道卫生院', '手工具制造', '固体饮料制造', '木竹材林产品采集', '植物油加工', '市政设施管理', '农业机械批发', '高速铁路旅客运输', '金属包装容器及材料制造', '邮政业', '贵金属压延加工', '其他货币银行服务', '陆地管道运输', '铁矿采选', '农业科学研究和试验发展', '群众文体活动', '轻质建筑材料制造', '电力电子元器件制造', '造纸和纸制品业', '其他测绘地理信息服务', '抽纱刺绣工艺品制造', '鸡的饲养', '特殊作业机器人制造', '原油加工及石油制品制造', '绳、索、缆制造', '金属切割及焊接设备制造', '其他未列明食品制造', '刨花板制造', '机动车充电销售', '木地板制造', '电影和广播电视节目发行', '公共就业服务', '体育场地设施管理', '电视', '水下救捞装备制造', '殡葬服务', '营林及木竹采伐机械制造', '种子种苗培育活动', '生态资源监测', '乳粉制造', '珠宝首饰零售', '畜牧机械制造', '其他专用化学产品制造', '锰矿、铬矿采选', '铁路运输维护活动', '涂料制造', '风能发电工程施工', '其他玻璃制品制造', '葡萄酒制造', '其他未列明农副食品加工', '文化、体育用品及器材专门零售', '畜牧业', '狩猎和捕捉动物', '橡胶板、管、带制造', '行业性团体', '非电力家用器具制造', '建筑装饰和装修业', '供应链管理服务', '其他机械设备及电子产品批发', '黑色金属铸造', '宠物寄托收养服务', '烟草制品业', '生物基材料制造', '教育辅助服务', '非金属矿及制品批发', '安全、消防用金属制品制造', '改装汽车制造', '民宿服务', '化学试剂和助剂制造', '互联网搜索服务', '海底管道运输', '航空、航天器及设备制造', '其他出版业', '组织管理服务', '人造板制造', '电子和电工机械专用设备制造', '贵金属冶炼', '互联网零售', '广播影视设备批发', '其他玻璃制造', '工业与专业设计及其他专业技术服务', '生物质燃气生产和供应业', '其他危险品仓储', '计量服务', '家用清洁卫生电器具制造', '医疗、外科及兽医用器械制造', '其他未列明非金属矿采选', '保险经纪服务', '谷物、豆及薯类批发', '证券经纪交易服务', '冷藏车道路运输', '汽车整车制造', '水产品加工', '金属表面处理及热处理加工', '其他开采专业及辅助性活动', '屠宰及肉类加工', '兽医服务', '酒、饮料和精制茶制造业', '木竹浆制造', '沿海货物运输', '电子元件及电子专用材料制造', '可穿戴智能设备制造', '电子游艺厅娱乐活动', '金属家具制造', '森林经营、管护和改培', '林业专业及辅助性活动', '音像制品、电子和数字出版物批发', '乡镇卫生院', '物联网技术服务', '锅炉及辅助设备制造', '畜禽粪污处理活动', '住宅装饰和装修', '营养食品制造', '单位后勤管理服务', '建筑装饰、装修和其他建筑业', '有色金属合金制造', '蛋品加工', '其他合成材料制造', '半导体器件专用设备制造', '污水处理及其再生利用', '动漫、游戏数字内容服务', '地质勘查技术服务', '其他文体设备和用品出租', '电气信号设备装置制造', '汽车租赁', '电池制造', '门诊部（所）', '其他牲畜饲养', '烟草种植', '深海石油钻探设备制造', '煤制品制造', '建筑装饰及水暖管道零件制造', '其他土木工程建筑', '融资租赁服务', '清洁服务', '草及其他制品制造', '首饰、工艺品及收藏品批发', '信息处理和存储支持服务', '汽车、摩托车等修理与维护', '其他互联网平台', '服务消费机器人制造', '档案馆', '人寿保险', '铁路运输业', '建筑工程机械与设备经营租赁', '博物馆', '运动防护用具制造', '计算器及货币专用设备制造', '野生动物保护', '海水养殖', '通信终端设备制造', '发电机及发电机组制造', '稻谷种植', '广播电视专用配件制造', '电子电路制造', '野生植物保护', '国家机构', '木质家具制造', '水上运输业', '糕点、糖果及糖批发', '摩托车制造', '其他人力资源服务', '记录媒介复制', '日用化工专用设备制造', '文化艺术业', '其他稀有金属冶炼', '林木育种和育苗', '广播电视集成播控', '家用厨房电器具制造', '城市轨道交通设备制造', '文具用品零售', '其他电池制造', '硅冶炼', '房地产开发经营', '中药材种植', '其他保险活动', '木材加工', '专用设备修理', '其他电子产品零售', '白酒制造', '日用玻璃制品制造', '光纤制造', '新能源车整车制造', '医院', '乳制品制造', '其他未列明体育', '盐加工', '灌溉活动', '架线和管道工程建筑', '养生保健服务', '其他日用品生产专用设备制造', '金属制厨房用器具制造', '其他寄递服务', '其他道路、隧道和桥梁工程建筑', '燃气生产和供应业', '皮鞋制造', '其他餐饮业', '非食用植物油加工', '印刷、制药、日化及日用品生产专用设备制造', '弹簧制造', '牛的饲养', '其他彩票服务', '衡器制造', '箱包零售', '模具制造', '其他谷物磨制', '其他金融信托与管理服务', '橡胶制品业', '农村资金互助社服务', '其他电力生产', '信用合作社服务', '工艺美术品及收藏品零售', '镍钴矿采选', '海底隧道工程建筑', '无机碱制造', '棕制品制造', '海洋能源开发利用工程建筑', '其他数字内容服务', '机械设备、五金产品及电子产品批发', '气压动力机械及元件制造', '床上用品制造', '其他常用有色金属冶炼', '通信设备制造', '通用设备制造业', '液压动力机械及元件制造', '蔬菜、食用菌及园艺作物种植', '生产专用起重机制造', '普通初中教育', '高铁车组制造', '幻灯及投影设备制造', '合成纤维制造', '棉纺纱加工', '其他海洋工程建筑', '固体矿产地质勘查', '电影放映', '竹制品制造', '其他农产品仓储', '电线、电缆制造', '纸浆制造', '自行车制造', '小额贷款公司服务', '土地登记服务', '烟草制品零售', '内陆捕捞', '计算机、软件及辅助设备零售', '国际组织', '网吧活动', '铸造机械制造', '中药零售', '数字出版', '运行维护服务', '涂料、油墨、颜料及类似产品制造', '农村集体经济组织管理', '木质制品制造', '日用家电批发', '急救中心（站）服务', '其他未列明日用产品修理业', '生态保护和环境治理业', '鬃毛加工、制刷及清扫工具制造', '保险监管服务', '葡萄种植', '渔业', '木材采运', '智能照明器具制造', '其他木材加工', '摩托车整车制造', '生产专用搪瓷制品制造', '牲畜饲养', '其他未列明专业技术服务业', '化纤织造及印染精加工', '体育表演服务', '竹、藤、棕、草等制品制造', '其他贵金属矿采选', '锦纶纤维制造', '农林牧渔专用仪器仪表制造', '体育健康服务', '珠宝首饰及有关物品制造', '专业音响设备制造', '制冷、空调设备制造', '其他运输代理业', '金属制卫生器具制造', '公开募集证券投资基金', '电子乐器制造', '玉米加工', '住宅房屋建筑', '潜水救捞及其他未列明运输设备制造', '建筑物拆除活动', '其他公路客运', '其他原油制造', '其他未列明电气机械及器材制造', '社会工作', '营养和保健品批发', '酒吧服务', '汽车零部件及配件制造', '航天相关设备制造', '猪的饲养', '其他软件开发', '动物园、水族馆管理服务', '种子批发', '航空航天器修理', '水资源管理', '太阳能发电工程施工', '仪器仪表修理', '咖啡馆服务', '工矿工程建筑', '行政监督检查机构', '其他城市公共交通运输', '炼铁', '烟煤和无烟煤开采洗选', '皮手套及皮装饰制品制造', '烟叶复烤', '专项运动器材及配件制造', '机械式停车设备制造', '环保技术推广服务', '纸制品制造', '天然植物纤维编织工艺品制造', '无机酸制造', '照明器具制造', '制鞋业', '管道和设备安装', '村卫生室', '建材批发', '人造纤维（纤维素纤维）制造', '宗教组织', '消费金融公司服务', '铁路机车车辆制造', '轮胎制造', '搬家运输', '其他一般旅馆', '服装批发', '运动机织服装制造', '贸易经纪与代理', '金属门窗制造', '稀土金属矿采选', '公证服务', '报刊批发', '护理机构服务', '文物及非物质文化遗产保护', '鱼苗及鱼种场活动', '森林经营和管护', '农林牧渔技术推广服务', '其他期货市场服务', '其他服务业', '海洋工程建筑', '铝矿采选', '财产保险', '其他传动部件制造', '家用电器及电子产品专门零售', '海洋环境服务', '物料搬运设备制造', '一般旅馆', '照相器材零售', '铅锌冶炼', '林产品初级加工活动', '草种植', '医疗用品及器材零售', '农业机械活动', '其他社会保障', '防洪除涝设施管理', '杂粮加工', '自行车和残疾人座车制造', '环保咨询', '公路工程建筑', '化妆品及卫生用品零售', '其他非货币银行服务', '其他文化用品批发', '客运索道制造', '其他家庭用品批发', '铜矿采选', '基金会', '办公服务', '摩托车零部件及配件制造', '生物质致密成型燃料加工', '家用美容、保健护理电器具制造', '矿山机械制造', '客运港口', '健康咨询', '采矿、冶金、建筑专用设备制造', '其他未列明教育', '核辐射加工', '油墨及类似产品制造', '服装零售', '焙烤食品制造', '产业用纺织制成品制造', '艺术品代理', '野生动物疫源疫病防控监测', '其他未列明零售业', '城乡市容管理', '稻谷加工', '票务代理服务', '旅游饭店', '其他陶瓷制品制造', '水利和水运工程建筑', '潜水装备制造', '外卖送餐服务', '其他家用纺织制成品制造', '有色金属压延加工', '钾肥制造', '其他智能消费设备制造', '信息安全设备制造', '其他电信服务', '体校及体育培训', '旅行社及相关服务', '快递服务', '体育咨询', '创业空间服务', '通用航空生产服务', '煤气生产和供应业', '节能技术推广服务', '资源与产权交易服务', '毛纺织及染整精加工', '农业机械经营租赁', '邮件包裹道路运输', '电影机械制造', '成人小学教育', '其他日用杂品制造', '石油和天然气开采专业及辅助性活动', '移动电信服务', '其他家禽饲养', '娱乐业', '呼叫中心', '临床检验服务', '体育经纪人', '化学药品原料药制造', '泡沫塑料制造', '地理遥感信息服务', '炸药、火工及焰火产品制造', '社区居民自治组织', '其他综合零售', '公共建筑装饰和装修', '艺术表演场馆', '炼焦', '石油钻采专用设备制造', '商业综合体管理服务', '人民检察院', '低温仓储', '电力工程施工', '其他金属加工机械制造', '安全系统监控服务', '科技会展服务', '金属丝绳及其制品制造', '中等教育', '旅客票务代理', '技能培训、教育辅助及其他教育', '纺织业', '其他非金属矿物制品制造', '其他仓储业', '海洋石油开采', '通讯设备修理', '其他中药材种植', '制镜及类似品加工', '金冶炼', '其他道路货物运输', '汽轮机及辅机制造', '兽用药品制造', '社区卫生服务中心（站）', '其他未列明服务业', '饲料加工', '体育', '专业技术服务业', '其他铁路运输辅助活动', '婚姻服务', '综合管理服务', '专用仪器仪表制造', '有线广播电视传输服务', '其他未列明畜牧业', '金属结构制造', '摄影扩印服务', '城际铁路旅客运输', '托儿所服务', '有色金属矿采选业', '酱油、食醋及类似制品制造', '食品、饮料及烟草制品专门零售', '其他未列明运输设备制造', '通信系统设备制造', '谷物磨制', '石膏、水泥制品及类似制品制造', '造纸', '提供住宿社会工作', '其他日用品零售', '工程技术与设计服务', '健康保险', '其他专用设备制造', '炼钢', '罐头食品制造', '休闲观光活动', '有色金属铸造', '肉、禽、蛋、奶及水产品零售', '其他非电力家用器具制造', '游艺用品及室内游艺器材制造', '海水捕捞', '涂料零售', '康复辅具适配服务', '其他体育用品制造', '家用电力器具制造', '针织或钩针编织物织造', '互联网其他信息服务', '人民政协', '其他电子专用设备制造', '合成纤维单（聚合）体制造', '锂离子电池制造', '塑料零件及其他塑料制品制造', '规划设计管理', '光伏设备及元器件制造', '餐饮配送及外卖送餐服务', '玻璃、陶瓷和搪瓷制品生产专用设备制造', '其他输配电及控制设备制造', '便利店零售', '国家权力机构', '建筑安装业', '群众团体', '建筑材料生产专用机械制造', '舞台及场地用灯制造', '泵、阀门、压缩机及类似机械制造', '其他未列明卫生服务', '生态保护工程施工', '大型车辆装备修理与维护', '残疾人座车制造', '其他非公开募集证券投资基金', '动物用药品零售', '洗染服务', '太阳能器具制造', '机械治疗及病房护理设备制造', '其他清洁服务', '长途客运', '液体乳制造', '电动机制造', '园林绿化工程施工', '其他黑色金属矿采选', '海洋服务', '林产化学产品制造', '笔的制造', '文具用品批发', '专业设计服务', '家用电子产品修理', '应用软件开发', '工业机器人制造', '航天器及运载火箭制造', '其他娱乐业', '邮政专用机械及器材制造', '牲畜批发', '艺术品、收藏品拍卖', '搪瓷卫生洁具制造', '其他土地管理服务', '助动车等修理与维护', '体育场地设施安装', '喷枪及类似器具制造', '住宿业', '印刷和记录媒介复制业', '农林牧渔机械配件制造', '安全保护服务', '货物运输代理', '货币金融服务', '航空运输业', '公共安全管理机构', '其他电气机械及器材制造', '社会团体', '医疗实验室及医用消毒设备和器具制造', '安全服务', '企业总部管理', '综合事务管理机构', '其他建筑安装', '金属切削机床制造', '热电联产', '游艺器材及娱乐用品制造', '船舶修理', '中药材仓储', '批发业', '放射性废物治理', '自来水生产和供应', '市场调查', '非公开募集证券投资基金', '新闻和出版业', '金属制品修理', '其他体育组织', '体育航空运动服务', '动物胶制造', '中药批发', '电工机械专用设备制造', '纺织面料鞋制造', '肉、禽、蛋、奶及水产品批发', '环保、邮政、社会公共服务及其他专用设备制造', '经济型连锁酒店', '录音制作', '锡矿采选', '化学纤维制造业', '非金属矿采选业', '天然气生产和供应业', '其他玩具制造', '镁矿采选', '纺织、服装和皮革加工专用设备制造', '汽车新车零售', '生物技术推广服务', '铁路货物运输', '砼结构构件制造', '铁路运输设备制造', '太阳能发电', '流动货摊零售', '互联网生活服务平台', '水上旅客运输', '制浆和造纸专用设备制造', '汽车制造业', '工程设计活动', '雷达及配套设备制造', '手工纸制造', '畜牧渔业饲料批发', '机动车、电子产品和日用产品修理业', '旧货零售', '水源及供水设施工程建筑', '地质勘查专用设备制造', '结构性金属制品制造', '地震服务', '农用薄膜批发', '林木育苗', '专业性团体', '糕点、面包制造', '银行理财服务', '自行车等代步设备零售', '油气仓储', '机动车燃油零售', '其他贸易经纪与代理', '木制容器制造', '非织造布制造', '其他橡胶制品制造', '其他非金属加工专用设备制造', '旅游会展服务', '计算机零部件制造', '水、二氧化碳等矿产地质勘查', '通讯设备批发', '动物用药品批发', '氮肥制造', '公共自行车服务', '固体废物治理', '商业、饮食、服务专用设备制造', '卫生', '非木竹材林产品采集', '电子元器件与机电组件设备制造', '兔的饲养', '藤制品制造', '摩托车修理与维护', '理发及美容服务', '日用塑料制品制造', '中成药生产', '通用零部件制造', '文具制造', '土壤污染治理与修复服务', '通用仓储', '环境保护专用设备制造', '蔬菜、菌类、水果和坚果加工', '计算机制造', '汽车及零配件批发', '其他专业咨询与调查', '家用纺织制成品制造', '非金属船舶制造', '日用及医用橡胶制品制造', '其他制鞋业', '骆驼饲养', '渔业机械制造', '保健食品制造', '乐器零售', '造林和更新', '天然水收集与分配', '人造草坪制造', '内河旅客运输', '糖料种植', '食品及饲料添加剂制造', '土地管理业', '玻璃纤维和玻璃纤维增强塑料制品制造', '复印和胶印设备制造', '初级形态塑料及合成树脂制造', '钢压延加工', '孤残儿童收养和庇护服务', '其他互联网服务', '淀粉及淀粉制品制造', '日用化学产品制造', '森林防火活动', '再生物资回收与批发', '体育竞赛组织', '其他电机制造', '其他未列明商务服务业', '汽车、摩托车、零配件和燃料及其他动力销售', '航空相关设备制造', '电力、热力生产和供应业', '航空运输辅助活动', '失业保险', '建筑、家具用金属配件制造', '塑料薄膜制造', '光缆制造', '蔬菜、水果罐头制造', '云母制品制造', '酒、饮料及茶叶批发', '耐火土石开采', '测绘地理信息服务', '节能工程施工', '客运汽车站', '锑冶炼', '其他酒制造', '工业控制计算机及系统制造', '开采专业及辅助性活动', '水泥制品制造', '玻璃仪器制造', '纺织品及针织品零售', '塑料包装箱及容器制造', '橡胶加工专用设备制造', '气体、液体分离及纯净设备制造', '海洋气象服务', '皮箱、包（袋）制造', '生物质液体燃料生产', '出版业', '摩托车及零配件零售', '多式联运和运输代理业', '特种陶瓷制品制造', '丙纶纤维制造', '敏感元件及传感器制造', '消防管理机构', '软件开发', '村民自治组织', '香料作物种植', '成人高中教育', '无线广播电视传输服务', '气体压缩机械制造', '西药零售', '商业养老金', '认证认可服务', '锡冶炼', '宠物饲养', '鞋和皮革修理', '一般物品拍卖', '创业指导服务', '五金产品批发', '人身保险', '其他未列明金属制品制造', '快餐服务', '音像制品、电子和数字出版物零售', '其他室内娱乐活动', '水利管理业', '电机制造', '其他电力工程施工', '汽车旧车零售', '磷肥制造', '仁果类和核果类水果种植', '放射性金属矿采选', '医药及医疗器材专门零售', '黑色金属矿采选业', '汽车零配件零售', '非货币银行服务', '观光游览航空服务', '再生橡胶制造', '高等教育', '宠物美容服务', '生物药品制品制造', '初等教育', '新能源技术推广服务', '供应用仪器仪表制造', '其他文教办公用品制造', '畜牧专业及辅助性活动', '电力供应', '摩托车及零配件批发', '共青团', '土地整治服务', '家用视听设备批发', '邮政基本服务', '计算机及通讯设备经营租赁', '腈纶纤维制造', '鹅的饲养', '变压器、整流器和电感器制造', '锻件及粉末冶金制品制造', '锯材加工', '城市配送', '其他卫星传输服务', '特种玻璃制造', '其他罐头食品制造', '地质勘探和地震专用仪器制造', '其他电子设备制造', '肉制品及副产品加工', '其他通用航空服务', '其他居民服务业', '农药制造', '滑动轴承制造', '民族医院', '低速汽车制造', '电子专用材料制造', '其他乳制品制造', '石棉、云母矿采选', '健康体检服务', '毛巾类制品制造', '印刷', '装卸搬运和仓储业', '稀土金属冶炼', '体育保障组织', '超级市场零售', '其他未列明批发业', '米、面制品及食用油批发', '其他稀有金属矿采选', '输配电及控制设备制造', '乐器批发', '百货零售', '棉印染精加工', '油料种植', '弹射玩具制造', '建筑装饰用石开采', '其他医疗设备及器械制造', '其他皮革制品制造', '其他室内装饰材料零售', '木楼梯制造', '宗教团体服务', '旅游客运', '非金属矿物制品业', '证券市场服务', '技术玻璃制品制造', '水泥、石灰和石膏制造', '其他日用化学产品制造', '基本保险', '电子出版物出版', '煤制液体燃料生产', '搪瓷制品制造', '其他社会团体', '其他信息技术服务业', '卫生陶瓷制品制造', '三维（3D)打印技术推广服务', '渔业专业及辅助性活动', '影视录放设备制造', '期货市场管理服务', '橡胶零件制造', '保险公估服务', '轻小型起重设备制造', '露营地服务', '中草药种植', '玉米种植', '采供血机构服务', '乐器制造', '马的饲养', '谷物、棉花等农产品仓储', '文化、办公用机械制造', '环境监测专用仪器仪表制造', '商务服务业', '化工、木材、非金属加工专用设备制造', '体育中介代理服务', '新闻业', '信用服务', '标准化服务', '非公路休闲车及零配件制造', '其他饮料作物种植', '食品、饮料及烟草制品批发', '保健辅助治疗器材零售', '家用视听设备零售', '其他娱乐用品制造', '工业设计服务', '其他广告服务', '大气污染治理', '非木竹浆制造', '其他针织或钩针编织服装制造', '其他不提供住宿社会工作', '家用通风电器具制造', '其他水果种植', '彩票活动', '游乐设施工程施工', '提供施工设备服务', '水文服务', '绝缘制品制造', '海洋工程装备制造', '墨水、墨汁制造', '其他运输设备修理', '邮购及电视、电话零售', '水产养殖', '眼镜制造', '金属船舶制造', '职业中介服务', '电气机械和器材制造业', '通用仪器仪表制造', '林产品采集', '市政道路工程建筑', '装订及印刷相关服务', '其他农业', '森林公园管理', '电梯、自动扶梯及升降机制造', '普通高等教育', '普通小学教育', '豆类、油料和薯类种植', '居民服务业', '基础软件开发', '轴承、齿轮和传动部件制造', '其他基本保险', '自然生态系统保护管理', '风机、风扇制造', '农药批发', '电声器件及零件制造', '会议、展览及相关服务', '人民法院和人民检察院', '方便面制造', '出租车客运', '计划生育技术服务活动', '其他质检技术服务', '其他原动设备制造', '宠物医院服务', '其他未列明餐饮业', '其他建筑材料制造', '肥皂及洗涤剂制造', '耐火陶瓷制品及其他耐火材料制造', '运动场地用塑胶制造', '建筑、安全用金属制品制造', '装卸搬运', '露天游乐场所游乐设备制造', '家用空气调节器制造', '其他体育', '其他有色金属压延加工', '体育场地设施工程施工', '西药批发', '专用设备制造业', '其他专用仪器制造', '再保险', '中乐器制造', '农业', '其他计算机制造', '保险代理服务', '河湖治理及防洪设施工程建筑', '汽车修理与维护', '针织或钩针编织品制造', '生物化学农药及微生物农药制造', '工艺美术及礼仪用品制造', '康复辅具制造', '家庭服务', '火力发电', '公路旅客运输', '妇幼保健院（所、站）', '纺织、服装及日用品专门零售', '炸药及火工产品制造', '金属压力容器制造', '其他煤炭加工', '地质勘查', '水泥制造', '机械零部件加工', '其他建筑、安全用金属制品制造', '群众团体、社会团体和其他成员组织', '饮料制造', '网络借贷服务', '鸭的饲养', '地毯、挂毯制造', '金属废料和碎屑加工处理', '耐火材料制品制造', '电线、电缆、光缆及电工器材制造', '其他海洋服务', '遥感测绘服务', '架线及设备工程建筑', '货摊、无店铺及其他零售业', '羽毛(绒)加工及制品制造', '其他未列明信息技术服务业', '连续搬运设备制造', '智能消费设备制造', '薯类种植', '成人高等教育', '体育用品制造', '基本养老保险', '社会事务管理机构', '煤炭及制品批发', '香料、香精制造', '金融信托与管理服务', '卫生洁具零售', '海水淡化处理', '其他会议、会展及相关服务', '水果种植', '其他铁路运输设备制造', '钟表与计时仪器制造', '工程监理服务', '建筑装饰搪瓷制品制造', '电信、广播电视和卫星传输服务', '香蕉等亚热带水果种植', '花画工艺品制造', '铁路旅客运输', '蜜饯制作', '投资与资产管理', '水上货物运输', '其他谷物种植', '国家行政机构', '精神康复服务', '豆制品制造']
lawsuit_list = ['民事诉讼', '民事调解书', '民事判决', '民事起诉', '代理合同纠纷', '民事调解', '民事裁定', '借款合同纠纷', '买卖合同纠纷', '货款合同纠纷', '贷款违约纠纷','财产损害赔偿纠纷', '股权转让诉讼', '劳动报酬纠纷', '行政诉讼', '侵权诉讼', '侵犯专利权', '债权', '商标', '产品责任纠纷', '解散纠纷', '劳动纠纷','买卖合同纠纷及反诉', '侵害作品信息网络传播权纠纷', '保证合同纠纷', '员工竞业限制纠纷', '票据追索权纠纷', '其他', '借款纠纷', '期货经纪合同纠纷', '借贷案', '财产保全','货款纠纷', '中小企业集合私募债券承销协议纠纷', '购销合同纠纷', '港口纠纷', '港口货物保管合同纠纷', '贷款纠纷', '游戏版权纠纷和不正当竞争纠纷', '债权转让合同纠纷','强行平仓纠纷', '房屋买卖合同纠纷', '商标权纠纷', '行政纠纷', '著作权纠纷 ', '票据纠纷', '物业服务合同纠纷', '公司解散纠纷', '确认合同效力纠纷', '软件著作权侵权纠纷','偿债申索纠纷', '广告合同纠纷', '承揽加工合同纠纷', '技术秘密纠纷', '超短融及中票纠纷', '安装合同纠纷', '融资融券业务纠纷', '龙山国际委托贷款纠纷', '实现担保物权纠纷','股权转让纠纷', '认购权协议纠纷', '交通事故责任纠纷', '劳动争议纠纷', '劳动合同纠纷', '抵债资产纠纷', '侵害商标权纠纷', '侵害外观设计专利权纠纷', '人身损害赔偿纠纷','设备采购纠纷', '设工程施工合同纠纷', '私募债违约纠纷', '经销合同纠纷', '金融借款合同纠纷', '仓储合同纠纷']
current_title_list = ['董事', '副总经理', '总经理', '监事', '董事会秘书', '财务总监', '董事长', '监事会主席', '副总裁', '职工监事', '总裁', '总经理助理', '总工程师', '财务负责人', '经理', '副董事长', '执行董事', '常务副总经理', '副行长', '工会主席', '党委书记', '党委副书记', '副行长', '发行人监事会主席', '行长', '副总工程师', '党委委员', '高级副总裁', '外部监事', '技术总监', '执行委员会委员', '首席财务官', '行政部经理', '发行人财务总监', '销售部部长', '财务经理', '党委副书记', '执行总裁', '合伙人', '副总经理', '高级合伙人', '纪委书记', '主任', '人力资源总监', '研发总监', '销售总监', '技术中心主任', '首席行政官', '非执行董事', '首席技术官', '事务代表', '副董事长', '投资执行事务合伙人', '总会计师', '事务合伙人', '首席战略官', '行政法务负责人', '办公室主任', '其他']
job_title_list = ['工程师', '会计师', '高级工程师', '教授', '高级经济师', '经济师', '高级会计师', '研究员', '技术员', '讲师', '中级会计师', '总工程师', '副教授', '中级工程师', '总会计师', '注册税务师', '正高级经济师', '政工师', '审计师', '高级政工师', '正高级工程师', '研究员级高级工程师', '副总工程师', '高级审计师', '注册会计师高级会计师', '会计员', '国际商务师', '城市规划师', '特许金融分析师', '畜牧兽医师', '注册资产评估师', '中级审计师', '总经济师', '技师', '统计员', '国家一级注册建造师', '高级工程师助理工程师', '正高级会计师', '研发工程师', '高级工程师总工程师', '教授级高级工程师总工程师', '高级经营师', '中级经济师', '二级建造师', '中国注册税务师', '高级国际财务管理师', '工程师任总工程师', '高级企业文化师', '研究院副总工程师', '计量工程师', '高级建筑师', '机械工程师', '教授级高级工程师注册一级建造师', '高级工程师副总工程师', '软件工程师', '人力资源管理师', '审计员', '一级注册建造师', '高级国际商务师', '电子信息技术工程师', '中国注册会计师中级会计师', '高级人力资源管理师', '高级会计师中国注册资产评估师', '高级工程师工程师', '二级人力资源管理师', '副总会计师', '质量工程师', '药师', '电气工程师', '高级工程师副总经理兼总工程师', '中级策划师', '助理讲师', '中国注册会计师高级经营师', '注册会计师注册税务师', '资深注册会计师', '其他']
"""
时间格式转换 例：（最终格式：年-月-日 / 年-月-日~年-月-日）
    "t2": "2016.12.31",
    "t3": " 2020-05-09 00:00:00",
    "t4": "2016 年 12 月 31 日",
    "t5": "2016 年 4 月",
    "t6": "2018 年",
    "t7": "2017/6/7-2018/5/20 ",
    "t8": "2017.4.1-2020.3.31",
    "t9": "2017年6月21日至2018年6月21日",
    "t10": "2017 年 5 月 1 日至 2018 年 4 月 30 日",
    "t11": "2015 年 1月 30 日至2024 年 10月 29 日期间发生的债权",
    "t12": "2018-01-01 至 2018-12-31",
    "t13": "2015 年 1 月 1 日起至 2017 年 12 月 31 日",
    "t14": " 自 2018年1月21 日至 2018 年 12 月 31 日",
    "t15": "2016 年 1 月 1 日至2017 年 12 月 31 日，协议期满前 30 日内双方如无异议，可自动延期 1 年，顺延次数不限",
    "t16": "合同有效期为 2016 年 1 月 1 日至 2016 年 12 月31 日。《商品合同》约定，任何一方有权在前述合同期限届满至少提前一个月书面通知另一方 于前述期限届满时终止本《商合， 使前述终止权，则本《商品合同》将视为已经由双方默认为无限期续订而有效并对双方具有约束力，在续订期内，任何一方有权提前一个月书面通知另一方以终止本《商品合同》",
"""


# 时间切片，补零
def slice_zero_pad(value):
    if re.search(r'^\d{4}\-\d{1}$', value):
        value_begin = value[0:5]
        value_end = value[5:]
        value = value_begin + '0' + value_end
    if re.search(r'^\d{4}\-\d{1}\-', value):
        value_begin = value[0:5]
        value_end = value[5:]
        value = value_begin + '0' + value_end
    if re.search(r'^\d{4}\-\d{2}\-\d{1}$', value):
        value_begin = value[0:8]
        value_end = value[8:]
        value = value_begin + '0' + value_end
    return value

# 有待优化，不必要所有的判断都得执行
def time_change(time):
    if time is not None:
        time = str(time)
        value = time.strip()
        value = value.replace('\n', '')
        # 去除字符串中的空格
        value = value.replace(' ', '')

        # 2020-05-09 00:00:00
        if re.search(r'^\d{4}\-\d{1,2}(\-\d{1,2})\s*\d{2}\:\d{2}\:\d{2}$', value):
            value = value.replace("00:00:00", "")
            value = slice_zero_pad(value)

        # 2018-1-17（在原格式上添零）
        if re.search(r'^\d{4}\-\d{1,2}(\-\d{1,2})$', value) or re.search(r'^\d{4}\-\d{1,2}$', value):
            value = slice_zero_pad(value)

        # 2016.12.31
        if re.search(r'^\d{4}\.\d{1,2}\.\d{1,2}$', value):
            value = value.replace(".", "-")
            value = slice_zero_pad(value)

        # 2016 年 12 月 31 日
        if re.search(r'^\d{4}\s*年\s*\d{1,2}\s*月\s*\d{1,2}\s*[\u4E00-\u9FFF]*$', value):
            value = value.replace("年", "-")
            value = value.replace("月", "-")
            value = value.replace("日", "")
            value = value.replace(" ", "")
            value = slice_zero_pad(value)

        # 2016 年 4 月
        if re.search(r'^\d{4}\s*年\s*\d{1,2}\s*[\u4E00-\u9FFF]*$', value):
            value = value.replace("年", "-")
            value = value.replace("月", "")
            value = value.replace(" ", "")
            value = slice_zero_pad(value)

        # 2018 年
        if re.search(r'^\d{4}\s*[\u4E00-\u9FFF]+\s*$', value):
            value = re.findall(r'^\d{4}', value)
            if value.__len__() == 1:
                value = value[0]

        # 2017/6/7-2018/5/20
        if re.search(r'^\d{4}\/\d{1,2}\/\d{1,2}\-\d{4}\/\d{1,2}\/\d{1,2}$', value) or re.search(r'^\d{4}\/\d{1,2}\/\d{1,2}\—\d{4}\/\d{1,2}\/\d{1,2}$', value):
            time_list = re.findall(r'\d{4}\/\d{1,2}\/\d{1,2}', value)
            time_list[0] = time_list[0].replace("/", "-")
            time_list[1] = time_list[1].replace("/", "-")
            value_begin = slice_zero_pad(time_list[0])
            value_end = slice_zero_pad(time_list[1])
            value = value_begin + '~' + value_end

        # 2017.4.1-2020.3.31
        if re.search(r'^\d{4}\.\d{1,2}\.\d{1,2}\-\d{4}\.\d{1,2}\.\d{1,2}[\u4E00-\u9FFF]*', value) or re.search(r'^\d{4}\.\d{1,2}\.\d{1,2}\—\d{4}\.\d{1,2}\.\d{1,2}[\u4E00-\u9FFF]*', value):
            time_list = re.findall(r'\d{4}\.\d{1,2}\.\d{1,2}', value)
            time_list[0] = time_list[0].replace(".", "-")
            time_list[1] = time_list[1].replace(".", "-")
            value_begin = slice_zero_pad(time_list[0])
            value_end = slice_zero_pad(time_list[1])
            value = value_begin + '~' + value_end

        # 2017年6月21日至2018年6月21日 / 2015 年 1月 30 日至2024 年 10月 29 日期间发生的债权/2015 年 1 月 1 日起至 2017 年 12 月 31 日
        if re.search(r'^[\u4E00-\u9FFF]*\s*\d{4}\s*年\s*\d{1,2}\s*月\s*\d{1,2}\s*[\u4E00-\u9FFF]*(\-)*\s*\d{4}\s*'
                     r'年\s*\d{1,2}\s*月\s*\d{1,2}\s*[\u4E00-\u9FFF]+', value):
            time_list = re.findall(r'\d{4}\s*年\s*\d{1,2}\s*月\s*\d{1,2}', value)
            if time_list.__len__() == 2:
                time_list[0] = time_list[0].replace("年", "-")
                time_list[0] = time_list[0].replace("月", "-")
                time_list[0] = time_list[0].replace("日", "")
                time_list[1] = time_list[1].replace("年", "-")
                time_list[1] = time_list[1].replace("月", "-")
                time_list[1] = time_list[1].replace("日", "")
                value_begin = slice_zero_pad(time_list[0])
                value_end = slice_zero_pad(time_list[1])
                value = value_begin + '~' + value_end

        # 2018-01-01 至 2018-12-31
        if re.search(r'^\d{4}\-\d{1,2}\-\d{1,2}\s*[\u4E00-\u9FFF]+\s*\d{4}\-\d{1,2}\-\d{1,2}$', value):
            time_list = re.findall(r'\d{4}\-\d{1,2}\-\d{1,2}', value)
            value_begin = slice_zero_pad(time_list[0])
            value_end = slice_zero_pad(time_list[1])
            value = value_begin + '~' + value_end

        # 2018/12/1
        if re.search(r'^\d{4}\/\d{1,2}\/\d{1,2}$', value):
            value = value.replace('/', '-')
            value = slice_zero_pad(value)

        # 2016.12.16至2017.12.15
        if re.search(r'^[\u4E00-\u9FFF]*\d{4}\.\d{1,2}\.\d{1,2}\s*[\u4E00-\u9FFF]+\s*\d{4}\.\d{1,2}\.\d{1,2}[\u4E00-\u9FFF]*$',value):
            time_list = re.findall(r'\d{4}\.\d{1,2}\.\d{1,2}', value)
            time_list[0] = time_list[0].replace(".", "-")
            time_list[1] = time_list[1].replace(".", "-")
            value_begin = slice_zero_pad(time_list[0])
            value_end = slice_zero_pad(time_list[1])
            value = value_begin + '~' + value_end

        # 2017年1-6月/"t33": "2017年11-6月","t34": "2017年1-36月","t34": "2017年11-36月",
        if re.search(r'^\d{4}\s*[\u4E00-\u9FFF]{1,2}\d{1,2}(\-){1,2}\d{1,2}[\u4E00-\u9FFF]*$', value) or re.search(
                r'^\d{4}\s*[\u4E00-\u9FFF]{1,2}\d{1,2}(\—){1,2}\d{1,2}[\u4E00-\u9FFF]*$', value):
            time_list = re.findall(r'\d{1,2}', value)
            if time_list.__len__() == 4:
                # print(time_list)
                value_begin = slice_zero_pad(time_list[0] + time_list[1] + '-' + time_list[2])
                value_end = slice_zero_pad(time_list[0] + time_list[1] + '-' + time_list[3])
                value = value_begin + '~' + value_end

        # 2017.1
        if re.search(r'^\d{4}\.\d{1,2}$', value):
            value = value.replace(".", "-")
            value = slice_zero_pad(value)

        #   2017/8/31至2018/8/30
        if re.search(r'^\d{4}\/\d{1,2}\/\d{1,2}\s*[\u4E00-\u9FFF]+\s*\d{4}\/\d{1,2}\/\d{1,2}$', value):
            time_list = re.findall(r'\d{4}\/\d{1,2}\/\d{1,2}', value)
            time_list[0] = time_list[0].replace("/", "-")
            time_list[1] = time_list[1].replace("/", "-")
            value_begin = slice_zero_pad(time_list[0])
            value_end = slice_zero_pad(time_list[1])
            value = value_begin + '~' + value_end

        # "t46": "2017.10-2037.9",
        if re.search(r'^\d{4}\.\d{1,2}\-\d{4}\.\d{1,2}[\u4E00-\u9FFF]*', value):
            time_list = re.findall(r'\d{4}\.\d{1,2}', value)
            time_list[0] = time_list[0].replace(".", "-")
            time_list[1] = time_list[1].replace(".", "-")
            value_begin = slice_zero_pad(time_list[0])
            value_end = slice_zero_pad(time_list[1])
            value = value_begin + '~' + value_end

        # 2015年（各期聚乙烯）
        # 2015年（应收账款）
        if re.search(r'^\d{4}\s*[\u4E00-\u9FFF]{1,2}(\（)+[\u4E00-\u9FFF]+(\）)+\s*$', value):
            value = re.findall(r'^\d{4}', value)
            if value.__len__() == 1:
                value = value[0]

        # 2017/4-2018/4
        if re.search(r'^\d{4}\/\d{1,2}\-\d{4}\/\d{1,2}$', value):
            time_list = re.findall(r'\d{4}\/\d{1,2}', value)
            time_list[0] = time_list[0].replace("/", "-")
            time_list[1] = time_list[1].replace("/", "-")
            value_begin = slice_zero_pad(time_list[0])
            value_end = slice_zero_pad(time_list[1])
            value = value_begin + '~' + value_end

        # 2017-2018
        if re.search(r'^\d{4}\-\d{4}$', value):
            value = value.replace('-','~')

        # value = data_blanking(value)
        return value

# 董监高时间格式规整
def time_person_change(dic_data):

    if dic_data['监事基本情况'] is not None:
        for sup_infor in dic_data['监事基本情况']:
            sup_infor['出生年月'] = time_change(sup_infor['出生年月'])
            sup_infor['起始日期'] = time_change(sup_infor['起始日期'])
            sup_infor['终止日期'] = time_change(sup_infor['终止日期'])

    if dic_data['董事基本情况'] is not None:
        for dir_infor in dic_data['董事基本情况']:
            dir_infor['出生年月'] = time_change(dir_infor['出生年月'])
            dir_infor['起始日期'] = time_change(dir_infor['起始日期'])
            dir_infor['终止日期'] = time_change(dir_infor['终止日期'])

    if dic_data['高管基本情况'] is not None:
        for man_infor in dic_data['高管基本情况']:
            man_infor['出生年月'] = time_change(man_infor['出生年月'])
            man_infor['起始日期'] = time_change(man_infor['起始日期'])
            man_infor['终止日期'] = time_change(man_infor['终止日期'])

    if dic_data['核心技术人员基本情况'] is not None:
        for core_tec_infor in dic_data['核心技术人员基本情况']:
            core_tec_infor['出生年月'] = time_change(core_tec_infor['出生年月'])
            core_tec_infor['起始日期'] = time_change(core_tec_infor['起始日期'])
            core_tec_infor['终止日期'] = time_change(core_tec_infor['终止日期'])

    return dic_data

# 发行人相关信息
def time_issuer_change(dic_data):
    dic_data['发行人基本情况']['成立日期'] = time_change(dic_data['发行人基本情况']['成立日期'])
    return dic_data

# 两层结构
def time_change_common(dic_data, fist_floor, second_floor):
    for time_temp in dic_data[fist_floor]:
        time_temp[second_floor] = time_change(time_temp[second_floor])
    return dic_data

# 时间格式修改合并调用
def json_time_change(dic_data):
    # 董监高
    dic_data = time_person_change(dic_data)
    # 发行人相关信息
    dic_data = time_issuer_change(dic_data)
    # 主要客户
    if dic_data['主要客户'] is not None:
        dic_data = time_change_common(dic_data,'主要客户', '时间')
    # 主要供应商
    if dic_data['主要供应商'] is not None:
        dic_data = time_change_common(dic_data,'主要供应商', '时间')
    # 重大合同
    if dic_data['重大合同'] is not None:
        dic_data = time_change_common(dic_data, '重大合同', '履行期限')
    # 盈利能力
    if dic_data['盈利能力'] is not None:
        dic_data = time_change_common(dic_data, '盈利能力', '报表日期')
    # 财务基本情况及财务指标
    if dic_data['财务基本情况及财务指标'] is not None:
        dic_data = time_change_common(dic_data, '财务基本情况及财务指标', '报表日期')
    # 专利
    if dic_data['专利'] is not None:
        dic_data = time_change_common(dic_data, '专利', '取得日期')
        dic_data = time_change_common(dic_data, '专利', '使用期限')
    # print(dic_data['专利'])

    return dic_data

# 境外居住权规整
def overseas_residency_change(dic_data):
    if dic_data['监事基本情况'] is not None:
        for sup_infor in dic_data['监事基本情况']:
            if sup_infor['境外居留权'] != '无' and sup_infor['境外居留权'] != None and sup_infor['境外居留权'] != '否' \
                    and sup_infor['境外居留权'] != '无境外居留权':
                sup_infor['境外居留权'] = '有'
            else:
                sup_infor['境外居留权'] = '无'

    if dic_data['董事基本情况'] is not None:
        for dir_infor in dic_data['董事基本情况']:
            if dir_infor['境外居留权'] != '无' and dir_infor['境外居留权'] != None and dir_infor['境外居留权'] != '否' \
                    and dir_infor['境外居留权'] != '无境外居留权':
                dir_infor['境外居留权'] = '有'
            else:
                dir_infor['境外居留权'] = '无'

    if dic_data['高管基本情况'] is not None:
        for man_infor in dic_data['高管基本情况']:
            if man_infor['境外居留权'] != '无' and man_infor['境外居留权'] != None and man_infor['境外居留权'] != '否' \
                    and man_infor['境外居留权'] != '无境外居留权':
                man_infor['境外居留权'] = '有'
            else:
                man_infor['境外居留权'] = '无'

    if dic_data['核心技术人员基本情况'] is not None:
        for core_tec_infor in dic_data['核心技术人员基本情况']:
            if core_tec_infor['境外居留权'] != '无' and core_tec_infor['境外居留权'] is not None and core_tec_infor['境外居留权'] != '否' \
                and core_tec_infor['境外居留权'] != '无境外居留权':
                core_tec_infor['境外居留权'] = '有'
            else:
                core_tec_infor['境外居留权'] = '无'

    return dic_data

# 专利是否存在权属纠纷
def patent_ownership(dic_data):
    if dic_data['专利'] is not None:
        for patent in dic_data['专利']:
            if patent['是否存在权属纠纷'] != '无' and patent['是否存在权属纠纷'] != '否' and patent['是否存在权属纠纷'] is not None:
                patent['是否存在权属纠纷'] = '是'
            else:
                patent['是否存在权属纠纷'] = '否'

    return dic_data

# 学历规范化函数
def education_change(value):
    if value is not None:
        value = value.replace(' ', '')
        if value.find('初中') != -1:
            value = "初中"
        if value.find('高中') != -1:
            value = "高中"
        if value.find('中专') != -1:
            value = "中专"
        if value.find('大专') != -1:
            value = "大专"
        if value.find('专科') != -1:
            value = "专科"
        if value.find('学士') != -1 or value.find('本科') != -1 or value.find('大学') != -1:
            value = "本科"
        if value.find('硕士') != -1 or value.find('研究生') != -1:
            value = "硕士"
        if value.find('博士') != -1 and value.find('博士后') == -1:
            value = "博士"
        if value.find('博士后') != -1:
            value = "博士后"
        if value.find('EMBA') != -1:
            value = "EMBA"
        if value.find('MBA') != -1:
            value = "MBA"
        if value.find('MPAcc') != -1:
            value = "MPAcc"
        if value is not None and value != '' and value != '无' and value != '-' and value not in (
                '本科', '硕士', '大专', '博士', '高中', '中专', '初中', 'EMBA', 'MBA', 'MPAcc', '博士后', '其他', '研究生', '博士研究生', '专科'):
            value = '其它'

    return value


# 性别 学历规范化
def gander_education_change(dic_data):
    if dic_data['监事基本情况'] is not None:
        for sup_infor in dic_data['监事基本情况']:
            if sup_infor['性别'] is not None:
                sup_infor['性别'] = sup_infor['性别'].strip()
            sup_infor['学历'] = education_change(sup_infor['学历'])

    if dic_data['董事基本情况'] is not None:
        for dir_infor in dic_data['董事基本情况']:
            if dir_infor['性别'] is not None:
                dir_infor['性别'] = dir_infor['性别'].strip()
            dir_infor['学历'] = education_change(dir_infor['学历'])

    if dic_data['高管基本情况'] is not None:
        for man_infor in dic_data['高管基本情况']:
            if man_infor['性别'] is not None:
                man_infor['性别'] = man_infor['性别'].strip()
            man_infor['学历'] = education_change(man_infor['学历'])

    if dic_data['核心技术人员基本情况'] is not None:
        for core_tec_infor in dic_data['核心技术人员基本情况']:
            if core_tec_infor['性别'] is not None:
                core_tec_infor['性别'] = core_tec_infor['性别'].strip()
            core_tec_infor['学历'] = education_change(core_tec_infor['学历'])

    return dic_data

# 数据保留两位小数
def num_zero_pad(value):
    value = str(value)
    if re.search(r'^(-?\d{1,3}(\,\d{3})*)$', value):
        value = value + '.00'
    if re.search(r'^(-?\d{1,3}(\,\d{3})*\.\d{1})$', value):
        value = value + '0'
    if re.search(r'^(-?\d{1,3}(\,\d{3})*\.\d{3,})$', value):
        value = re.findall(r'^(-?\d{1,3}(\,\d{3})*\.\d{2})', value)
        if value.__len__() == 1:
            value = value[0][0]
        # print(value)
    return value

# 百分比处理
def percentage_process(value):
    value = str(value)
    if re.search(r'^(-?(\d)+(\.(\d)+)*)$', value):
        if re.search(r'^(-?(\d)+)$', value):
            value = value + '.00%'
        if re.search(r'(-?(\d)+(\.\d{1}))$', value):
            value = value + '0%'
        if re.search(r'(-?(\d)+(\.\d{2}))$', value):
            value = value + '%'
        if re.search(r'(-?(\d)+(\.\d{3,}))$', value):
            value = re.findall(r'(-?\d+\.\d{2})', value)
            if value.__len__() == 1:
                value = value[0] + "%"
    else:
        value = None

    return value

# 金额
def amount_change(dic_data):
    # 基本财务指标
    if dic_data['财务基本情况及财务指标'] is not None:
        for fin_basic_gen in dic_data['财务基本情况及财务指标']:
            if isinstance(fin_basic_gen['合并资产负债表'], dict):
                for key_fist, value_fist in fin_basic_gen['合并资产负债表'].items():
                    for key_second, value_second in value_fist.items():
                        if re.search(r'^(-?\d+)(\.\d+)?$', str(value_second)):
                            if re.search(r'^(-?\d+)(\.\d+)$', str(value_second)):
                                value_second = float(value_second)
                            else:
                                value_second = int(value_second)
                            amount = "{:,}".format(value_second)
                            amount = num_zero_pad(amount)
                            value_fist[key_second] = amount
            # print(fin_basic_gen['合并资产负债表'])

            if isinstance(fin_basic_gen['合并现金流量表'], dict):
                for key_one, value_one in fin_basic_gen['合并现金流量表'].items():
                        if re.search(r'^(-?\d+)(\.\d+)?$', str(value_one)):
                            if re.search(r'^(-?\d+)(\.\d+)$', str(value_one)):
                                value_one = float(value_one)
                            else:
                                value_one = int(value_one)
                            amount = "{:,}".format(value_one)
                            amount = num_zero_pad(amount)
                            fin_basic_gen['合并现金流量表'][key_one] = amount
            # print(fin_basic_gen['合并现金流量表'])

            # 金额转换意外错误
            if isinstance(fin_basic_gen['合并利润表'], dict):
                for key_fist, value_fist in fin_basic_gen['合并利润表'].items():
                    if isinstance(value_fist, dict):
                        for key_second, value_second in value_fist.items():
                            if re.search(r'^(-?\d+)(\.\d+)?$', str(value_second)):
                                if re.search(r'^(-?\d+)(\.\d+)$', str(value_second)):
                                    value_second = float(value_second)
                                else:
                                    value_second = int(value_second)
                                amount = "{:,}".format(value_second)
                                amount = num_zero_pad(amount)
                                value_fist[key_second] = amount

                    else:
                        if re.search(r'^(-?\d+)(\.\d+)?$', str(value_fist)):
                            if re.search(r'^(-?\d+)(\.\d+)$', str(value_fist)):
                                value_fist = float(value_fist)
                            else:
                                value_fist = int(value_fist)
                            amount = "{:,}".format(value_fist)
                            amount = num_zero_pad(amount)
                            fin_basic_gen['合并利润表'][key_fist] = amount
            # print(fin_basic_gen['合并利润表'])

            if isinstance(fin_basic_gen['基本财务指标'], dict):
                for key_fist, value_fist in fin_basic_gen['基本财务指标'].items():
                    if re.search(r'^(-?\d+)(\.\d+)?$', str(value_fist)):
                        if re.search(r'^(-?\d+)(\.\d+)$', str(value_fist)):
                            value_fist = float(value_fist)
                        else:
                            value_fist = int(value_fist)
                        amount = "{:,}".format(value_fist)
                        amount = num_zero_pad(amount)
                        fin_basic_gen['基本财务指标'][key_fist] = amount

                # print(fin_basic_gen['基本财务指标'])

    # 盈利能力,正则意外错误
    if dic_data['盈利能力'] is not None:
        for issuer_profession in dic_data['盈利能力']:
            if isinstance(issuer_profession, dict):
                for key_first, value_first in issuer_profession.items():
                    if isinstance(value_first, dict):
                        for key_secount, value_secount in value_first.items():
                            for echo_amount in value_secount:
                                if isinstance(echo_amount, dict):
                                    for key_third, value_third in echo_amount.items():
                                        if re.search(r'^(-?\d+)(\.\d+)?$', str(value_third)):
                                            if re.search(r'^(-?\d+)(\.\d+)$', str(value_third)):
                                                value_third = float(value_third)
                                            else:
                                                value_third = int(value_third)
                                            amount = "{:,}".format(value_third)
                                            amount = num_zero_pad(amount)
                                            echo_amount[key_third] = amount
        # print(dic_data['盈利能力'])

    # 重大合同,正则意外错误
    if dic_data['重大合同'] is not None:
        for major_contract in dic_data['重大合同']:
            if isinstance(major_contract, dict):
                for key_first, value_first in major_contract.items():
                    if key_first != '履行期限':
                        if re.search(r'^(-?\d+)(\.\d+)?$', str(value_first)):
                            if re.search(r'^(-?\d+)(\.\d+)$', str(value_first)):
                                value_first = float(value_first)
                            else:
                                value_first = int(value_first)
                            amount = "{:,}".format(value_first)
                            amount = num_zero_pad(amount)

                            major_contract[key_first] = amount
        # print(dic_data['重大合同'])

    # 主要供应商
    if dic_data['主要供应商'] is not None:
        for major_supplier in dic_data['主要供应商']:
            if isinstance(major_supplier, dict):
                for key_first, value_first in major_supplier.items():
                    if key_first != '时间':
                        if re.search(r'^(-?\d+)(\.\d+)?$', str(value_first)):
                            if re.search(r'^(-?\d+)(\.\d+)$', str(value_first)):
                                value_first = float(value_first)
                            else:
                                value_first = int(value_first)
                            amount = "{:,}".format(value_first)
                            amount = num_zero_pad(amount)
                            major_supplier[key_first] = amount
        # print(dic_data['主要供应商'])

    # 主要客户
    if dic_data['主要客户'] is not None:
        for major_client in dic_data['主要客户']:
            if isinstance(major_client, dict):
                for key_first, value_first in major_client.items():
                    if key_first != '时间':
                        if re.search(r'^(-?\d+)(\.\d+)?$', str(value_first)):
                            if re.search(r'^(-?\d+)(\.\d+)$', str(value_first)):
                                value_first = float(value_first)
                            else:
                                value_first = int(value_first)
                            amount = "{:,}".format(value_first)
                            amount = num_zero_pad(amount)
                            major_client[key_first] = amount
        # print(dic_data['主要客户'])

    # 募集资金与运用
    if dic_data['募集资金与运用'] is not None:
        for fund_raising in dic_data['募集资金与运用']:
            if isinstance(fund_raising, dict):
                for key_first, value_first in fund_raising.items():
                    if re.search(r'^(-?\d+)(\.\d+)?$', str(value_first)):
                        if re.search(r'^(-?\d+)(\.\d+)$', str(value_first)):
                            value_first = float(value_first)
                        else:
                            value_first = int(value_first)
                        amount = "{:,}".format(value_first)
                        amount = num_zero_pad(amount)
                        fund_raising[key_first] = amount
        # print(dic_data['募集资金与运用'])

    # # 重大诉讼事项
    if dic_data['重大诉讼事项'] is not None:
        for major_lawsuit in dic_data['重大诉讼事项']:
            if isinstance(major_lawsuit, dict):
                for key_first, value_first in major_lawsuit.items():
                    if re.search(r'^(-?\d+)(\.\d+)?$', str(value_first)):
                        if re.search(r'^(-?\d+)(\.\d+)$', str(value_first)):
                            value_first = float(value_first)
                        else:
                            value_first = int(value_first)
                        amount = "{:,}".format(value_first)
                        amount = num_zero_pad(amount)
                        major_lawsuit[key_first] = amount
        # print(dic_data['重大诉讼事项'])

    # # 专利
    if dic_data['专利'] is not None:
        for major_lawsuit in dic_data['专利']:
            if isinstance(major_lawsuit, dict):
                acquisition_cost = major_lawsuit['取得成本']
                book_value = major_lawsuit['最近一期末账面价值']

                if re.search(r'^(-?\d+)(\.\d+)?$', str(acquisition_cost)):
                    if re.search(r'^(-?\d+)(\.\d+)$', str(acquisition_cost)):
                        acquisition_cost = float(acquisition_cost)
                    else:
                        acquisition_cost = int(acquisition_cost)
                    acquisition_cost = "{:,}".format(acquisition_cost)
                    major_lawsuit['取得成本'] = acquisition_cost

                if re.search(r'^(-?\d+)(\.\d+)?$', str(book_value)):
                    if re.search(r'^(-?\d+)(\.\d+)$', str(book_value)):
                        book_value = float(book_value)
                    else:
                        book_value = int(book_value)
                    book_value = "{:,}".format(book_value)
                    book_value = num_zero_pad(book_value)
                    major_lawsuit['最近一期末账面价值'] = book_value
    #     # print(dic_data['专利'])

    return dic_data

"""
value:匹配项
string_list:匹配字符串列表
suitability：所需匹配度
"""
def string_matching(value, string_list, suitability):
        sim_last = 0
        if value is not None:
            for string_each in string_list:
                sim_lev = Levenshtein.ratio(value, string_each)
                if sim_lev > sim_last:
                    string_last = string_each
                    sim_last = sim_lev
            if sim_last > suitability:
                value = string_last

        return value

# 国籍规整行数
def nationality(value):
    # 优点：能够识别中国大陆籍等特殊字符串，确定编写繁琐
    # nationality_list = [
    #     '菲律宾', '荷兰', '法国', '奥地利', '圣基茨和尼维斯联邦', '美国', '加拿大',
    #     '新加坡', '澳大利亚', '日本', '英国','意大利', '马来西亚', '韩国', '新西兰', '葡萄牙', '瑞士',
    #     '德国', '印度', '比利时', '其他'
    # ]

    # value = value.replace(' ', '')
    # if value.find('中国') != -1:
    #     if value.find('中国台湾') != -1:
    #         value = '中国台湾'
    #     elif value.find('中国香港') != -1:
    #         value = '中国香港'
    #     elif value.find('中国澳门') != -1:
    #         value = '中国澳门'
    #     elif value.find('中国') != -1:
    #         value = '中国'
    # else:
    #     for nationlity in nationality_list:
    #         if value.find(nationlity) != -1:
    #             value = nationlity
    #         elif value.find('圣基茨和尼维斯') != -1:
    #                 value = '圣基茨和尼维斯联邦'
    #     if value not in nationality_list and value != '无' and value is not None and value != '-':
    #         value = '其它'

    if value is not None:
        value = value.replace(' ', '')
        value = string_matching(value, nationality_list, 0.6)
        if value not in nationality_list and value != '无' and value is not None and value != '-':
            value = '其它'

    return value

# 国籍规整 + 企业性质 + 职称 + 职位
def nationality_change(dic_data):
    if dic_data['监事基本情况'] is not None:
        for sup_infor in dic_data['监事基本情况']:
            sup_infor['国籍'] = nationality(sup_infor['国籍'])
            sup_infor['职称'] = string_matching(sup_infor['职称'], job_title_list, 0.6)
            sup_infor['现任职务'] = string_matching(sup_infor['现任职务'], current_title_list, 0.6)

    if dic_data['董事基本情况'] is not None:
        for dir_infor in dic_data['董事基本情况']:
            dir_infor['国籍'] = nationality(dir_infor['国籍'])
            dir_infor['职称'] = string_matching(dir_infor['职称'], job_title_list, 0.6)
            dir_infor['现任职务'] = string_matching(dir_infor['现任职务'], current_title_list, 0.6)
            # print(dir_infor['现任职务'])

    if dic_data['高管基本情况'] is not None:
        for man_infor in dic_data['高管基本情况']:
            man_infor['国籍'] = nationality(man_infor['国籍'])
            man_infor['职称'] = string_matching(man_infor['职称'], job_title_list, 0.6)
            man_infor['现任职务'] = string_matching(man_infor['现任职务'], current_title_list, 0.6)

    if dic_data['核心技术人员基本情况'] is not None:
        for core_tec_infor in dic_data['核心技术人员基本情况']:
            core_tec_infor['国籍'] = nationality(core_tec_infor['国籍'])
            core_tec_infor['职称'] = string_matching(core_tec_infor['职称'], job_title_list, 0.6)
            core_tec_infor['现任职务'] = string_matching(core_tec_infor['现任职务'], current_title_list, 0.6)

    if dic_data['控股股东简要情况'] is not None:
        if isinstance(dic_data['控股股东简要情况'], dict):
            for each_one in dic_data['控股股东简要情况'].get('自然人', None):
                for key, value in each_one.items():
                    if key == '国籍':
                        each_one[key] = nationality(value)
            # 企业性质规整
            for each_one in dic_data['控股股东简要情况'].get('法人', None):
                for key, value in each_one.items():
                    if key == '企业性质':
                        each_one[key] = string_matching(value, nature_of_business, 0.6)
                        # print(each_one[key])

    if dic_data['实际控制人简要情况'] is not None:
        if isinstance(dic_data['实际控制人简要情况'], dict):
            for each_one in dic_data['实际控制人简要情况'].get('自然人', None):
                for key, value in each_one.items():
                    if key == '国籍':
                        each_one[key] = nationality(value)

    return dic_data

# 行业分类代码规整
def industry_code_change(dic_data):
    if dic_data['发行人所处行业'] is not None:
        for issuer_profession in dic_data['发行人所处行业']:
            if isinstance(issuer_profession, dict):
                for key, value in issuer_profession.items():
                    if key == '行业分类代码':
                        if value is not None:
                            issuer_profession[key] = value.replace(' ', '').upper()

    return dic_data

# 行业分类标准规整函数
def industry_standard(value):
    if value is not None:
        value = value.replace(' ', '')
        if re.search(r'公司行业分类指引', value) and re.search(r'2012', value):
            value = '《上市行业分类指引》（2012年修订）'
        elif re.search(r'公司行业分类指引', value):
            value = '《上市行业分类指引》'
        elif re.search(r'国民经济行业分类', value) and re.search(r'2002', value):
            value = '《国民经济行业分类》（GB/T4754-2002）'
        elif re.search(r'国民经济行业分类', value) and re.search(r'2011', value):
            value = '《国民经济行业分类》（GB/T4754-2017）'
        elif re.search(r'国民经济行业分类', value) and re.search(r'201', value):
            value = '《国民经济行业分类》（GB/T4754-2017）'
        elif re.search(r'国民经济行业分类', value):
            value = '《国民经济行业分类》'
        elif re.search(r'战略性新兴产业重点产品和服务指导目录', value):
            value = '《战略性新兴产业重点产品和服务指导目录（2016版）》'
        elif re.search(r'高收缩涤纶牵伸丝', value) and re.search(r'2014', value):
            value = '《高收缩涤纶牵伸丝Q/320582LJT5-2014》'
        elif re.search(r'文化及相关产业分类', value) and re.search(r'2018', value):
            value = '《文化及相关产业分类（2018）》'
        elif re.search(r'北京市文化创意产业分类', value):
            value = '《北京市文化创意产业分类标准》'
        elif re.search(r'文化及相关产业分类', value) and re.search(r'2012', value):
            value = '国家统计局发布的《文化及相关产业分类（2012）》'
        elif re.search(r'仿生涤纶异形牵伸丝', value) and re.search(r'2016', value):
            value = '《仿生涤纶异形牵伸丝Q/320582LJT7-2016》'
        elif re.search(r'产业结构调整指导', value) and re.search(r'2011', value):
            value = '《产业结构调整指导目录（2011年本）》'
        elif re.search(r'非金融机构支付服务管理办法', value):
            value = '《非金融机构支付服务管理办法》'
        elif re.search(r'挂牌管理型行业分类', value):
            value = '《挂牌管理型行业分类指引》'
        elif re.search(r'战略性新兴产业重点产品和服务指导', value) and re.search(r'2016', value):
            value = '《战略性新兴产业重点产品和服务指导目录》（2016年版）'
        elif value is not None and value != '无' and value != '未披露' and value != '':
            value = '其他'

    return value

# 行业分类标准规整
def industry_standard_change(dic_data):
    if dic_data['发行人所处行业'] is not None:
        for issuer_profession in dic_data['发行人所处行业']:
            if isinstance(issuer_profession, dict):
                for key, value in issuer_profession.items():
                    if key == '行业分类标准':
                        issuer_profession[key] = industry_standard(value)

    return dic_data

# 行业分类名称规整
def industry_name_change(dic_data):
    if dic_data['发行人所处行业'] is not None:
        for issuer_profession in dic_data['发行人所处行业']:
            if isinstance(issuer_profession, dict):
                for key, value in issuer_profession.items():
                    if key == '行业分类名称':
                        issuer_profession[key] = string_matching(value, industry_name_list, 0.6)

    return dic_data

# 诉讼类型规整
def lawsuit_change(dic_data):
    if dic_data['重大诉讼事项'] is not None:
        for major_lawsuit in dic_data['重大诉讼事项']:
            if isinstance(major_lawsuit, dict):
                for key, value in major_lawsuit.items():
                    if key == '诉讼仲裁类型':
                        value_lawsuit_type = string_matching(value, lawsuit_list, 0.6)
                        if value_lawsuit_type not in lawsuit_list and value_lawsuit_type is not None and value_lawsuit_type != '无' and value != '':
                            value_lawsuit_type = '其他'
                        major_lawsuit[key] = value_lawsuit_type

    return dic_data

class FormatChange():
    def format_change(self):
        # 文件内容读取
        for index_file, json_file in enumerate(os.listdir(json_file_path)):
            print(index_file, json_file)
            file_path = os.path.join(json_file_path, json_file)
            with open(file_path, encoding='utf-8') as p_file:
                dic_data = json.load(p_file)

            # 时间格式规整
            dic_data = json_time_change(dic_data)
            # 境外居住权规整
            dic_data = overseas_residency_change(dic_data)
            #是否存在权属纠纷
            dic_data = patent_ownership(dic_data)
            # 性别 学历规范化
            dic_data = gander_education_change(dic_data)
            # 金额
            dic_data = amount_change(dic_data)
            # 国籍 + 企业性质 + 职称 + 职位(多个职位职称的不能处理)
            dic_data = nationality_change(dic_data)
            # 行业分类代码
            dic_data = industry_code_change(dic_data)
            # 行业分类标准
            dic_data = industry_standard_change(dic_data)
            # 行业分类名称
            dic_data = industry_name_change(dic_data)
            # 诉讼类型
            dic_data = lawsuit_change(dic_data)
            # 百分比处理
            dic_data


            # print(dic_data['主要客户'])
            # print(dic_data['财务基本情况及财务指标'])


            json_data = json.dumps(dic_data, ensure_ascii=False).replace(" NaN", '"无"')
            file_path_changed = os.path.join(json_file_changed, json_file)
            with open(file_path_changed, 'w', encoding='utf-8') as n_file:
                n_file.write(json_data)


if __name__ == '__main__':
    temp = FormatChange()
    temp.format_change()

